--
-- Cypher Query Language - Shortestpath
--
-- prepare
DROP GRAPH sp CASCADE;
ERROR:  graph "sp" does not exist
CREATE GRAPH sp;
-- shortestpath(), allshortestpaths()
SET graph_path = sp;
CREATE OR REPLACE FUNCTION ids(vertex[]) RETURNS int[] AS $$
DECLARE
  v vertex;
  vids int[];
BEGIN
  IF $1 IS NULL THEN
    RETURN ARRAY[]::int[];
  END IF;
  FOREACH v IN ARRAY $1 LOOP
    vids = array_append(vids, (v->>'id')::int);
  END LOOP;
  RETURN vids;
END;
$$ LANGUAGE plpgsql;
-- 1->2->3->4->5
CREATE	(:person {id: 1})-[:knows]->
		(:person {id: 2})-[:knows]->
		(:person {id: 3})-[:knows]->
		(:person {id: 4})-[:knows]->
		(:person {id: 5})-[:knows]->
		(:person {id: 6});
MATCH (p:person), (f:person) WHERE p.id = 3 AND f.id = 4
RETURN ids(nodes(shortestpath((p)-[:knows]->(f)))) AS ids;
  ids  
-------
 {3,4}
(1 row)

MATCH (p:person), (f:person) WHERE p.id = 3 AND f.id = 5
RETURN ids(nodes(shortestpath((p)-[:knows]->(f)))) AS ids;
 ids 
-----
 {}
(1 row)

MATCH (p:person), (f:person) WHERE p.id = 3
RETURN ids(nodes(shortestpath((p)<-[:knows]-(f)))) AS ids;
  ids  
-------
 {}
 {3,2}
 {}
 {}
 {}
 {}
(6 rows)

MATCH (p:person), (f:person) WHERE p.id = 3
RETURN ids(nodes(shortestpath((p)-[:knows*]->(f)))) AS ids;
    ids    
-----------
 {}
 {}
 {}
 {3,4}
 {3,4,5}
 {3,4,5,6}
(6 rows)

MATCH (p:person), (f:person) WHERE p.id = 3
RETURN ids(nodes(shortestpath((p)<-[:knows*]-(f)))) AS ids;
   ids   
---------
 {3,2,1}
 {3,2}
 {}
 {}
 {}
 {}
(6 rows)

MATCH (p:person), (f:person), x=shortestpath((p)<-[:knows*]-(f))
WHERE p.id = 3
RETURN ids(nodes(x)) AS ids;
   ids   
---------
 {3,2,1}
 {3,2}
(2 rows)

MATCH (p:person), (f:person), x=shortestpath((p)-[:knows*]->(f))
WHERE p.id = 3
RETURN ids(nodes(x)) AS ids;
    ids    
-----------
 {3,4}
 {3,4,5}
 {3,4,5,6}
(3 rows)

MATCH x=shortestpath((p:person)-[:knows*]->(f:person))
WHERE p.id = 3
RETURN ids(nodes(x)) AS ids;
    ids    
-----------
 {3,4}
 {3,4,5}
 {3,4,5,6}
(3 rows)

MATCH x=shortestpath((p:person)<-[:knows*]-(f:person))
WHERE p.id = 3
RETURN ids(nodes(x)) AS ids;
   ids   
---------
 {3,2,1}
 {3,2}
(2 rows)

MATCH (p:person), (f:person) WHERE p.id = 3
RETURN ids(nodes(shortestpath((p)-[:knows*0..1]-(f)))) AS ids;
  ids  
-------
 {}
 {3,2}
 {3}
 {3,4}
 {}
 {}
(6 rows)

MATCH (p:person), (f:person) WHERE p.id = 1
RETURN ids(nodes(shortestpath((p)-[:knows*2..]->(f)))) AS ids;
ERROR:  only 0 or 1 is allowed for minimal length
LINE 2: RETURN ids(nodes(shortestpath((p)-[:knows*2..]->(f)))) AS id...
                                                  ^
MATCH (p:person), (f:person) WHERE p.id = 3 AND f.id = 5
CREATE (p)-[:knows]->(:person {id: 6})-[:knows]->(f);
MATCH (p:person), (f:person) WHERE p.id = 1 AND f.id = 5
RETURN length(allshortestpaths((p)-[:knows*]-(f))) AS cnt;
 cnt 
-----
 2
(1 row)

CREATE VLABEL v;
CREATE ELABEL e;
CREATE (:v {id: 0});
CREATE (:v {id: 1});
CREATE (:v {id: 2});
CREATE (:v {id: 3});
CREATE (:v {id: 4});
CREATE (:v {id: 5});
CREATE (:v {id: 6});
MATCH (v1:v {id: 0}), (v2:v {id: 4})
CREATE (v1)-[:e {weight: 3}]->(v2);
MATCH (v1:v {id: 0}), (v2:v {id: 1})
CREATE (v1)-[:e {weight: 7}]->(v2);
MATCH (v1:v {id: 0}), (v2:v {id: 5})
CREATE (v1)-[:e {weight: 10}]->(v2);
MATCH (v1:v {id: 4}), (v2:v {id: 6})
CREATE (v1)-[:e {weight: 5}]->(v2);
MATCH (v1:v {id: 4}), (v2:v {id: 3})
CREATE (v1)-[:e {weight: 11}]->(v2);
MATCH (v1:v {id: 4}), (v2:v {id: 1})
CREATE (v1)-[:e {weight: 2}]->(v2);
MATCH (v1:v {id: 1}), (v2:v {id: 3})
CREATE (v1)-[:e {weight: 10}]->(v2);
MATCH (v1:v {id: 1}), (v2:v {id: 2})
CREATE (v1)-[:e {weight: 4}]->(v2);
MATCH (v1:v {id: 1}), (v2:v {id: 5})
CREATE (v1)-[:e {weight: 6}]->(v2);
MATCH (v1:v {id: 5}), (v2:v {id: 3})
CREATE (v1)-[:e {weight: 9}]->(v2);
MATCH (v1:v {id: 6}), (v2:v {id: 3})
CREATE (v1)-[:e {weight: 4}]->(v2);
MATCH (v1:v {id: 2}), (v2:v {id: 3})
CREATE (v1)-[:e {weight: 2}]->(v2);
MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1)-[e:e]->(v2), e.weight)
RETURN nodes(p);
                                       nodes                                       
-----------------------------------------------------------------------------------
 [v[5.1]{"id": 0},v[5.5]{"id": 4},v[5.2]{"id": 1},v[5.3]{"id": 2},v[5.4]{"id": 3}]
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v2)<-[e:e]-(v1), e.weight)
RETURN nodes(p);
                                       nodes                                       
-----------------------------------------------------------------------------------
 [v[5.4]{"id": 3},v[5.3]{"id": 2},v[5.2]{"id": 1},v[5.5]{"id": 4},v[5.1]{"id": 0}]
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1)-[e:e]-(v2), e.weight)
RETURN nodes(p);
                                       nodes                                       
-----------------------------------------------------------------------------------
 [v[5.1]{"id": 0},v[5.5]{"id": 4},v[5.2]{"id": 1},v[5.3]{"id": 2},v[5.4]{"id": 3}]
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v2)-[e:e]-(v1), e.weight)
RETURN nodes(p);
                                       nodes                                       
-----------------------------------------------------------------------------------
 [v[5.4]{"id": 3},v[5.3]{"id": 2},v[5.2]{"id": 1},v[5.5]{"id": 4},v[5.1]{"id": 0}]
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1)-[e:e]->(v2), e.weight + 1)
RETURN nodes(p);
                               nodes                               
-------------------------------------------------------------------
 [v[5.1]{"id": 0},v[5.5]{"id": 4},v[5.7]{"id": 6},v[5.4]{"id": 3}]
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1)-[e:e]->(v2), e.weight, e.weight >= 5)
RETURN nodes(p);
                       nodes                       
---------------------------------------------------
 [v[5.1]{"id": 0},v[5.2]{"id": 1},v[5.4]{"id": 3}]
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1)-[e:e]->(v2), e.weight, e.weight)
RETURN nodes(p);
                                       nodes                                       
-----------------------------------------------------------------------------------
 [v[5.1]{"id": 0},v[5.5]{"id": 4},v[5.2]{"id": 1},v[5.3]{"id": 2},v[5.4]{"id": 3}]
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1:v {id: 0})-[e:e]->(v2), e.weight)
RETURN nodes(p);
ERROR:  property constraint is not supported
LINE 2:       p=dijkstra((v1:v {id: 0})-[e:e]->(v2), e.weight)
                          ^
MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1:v)-[e:e*1..]->(v2), e.weight)
RETURN nodes(p);
ERROR:  variable length relationship is not supported
LINE 2:       p=dijkstra((v1:v)-[e:e*1..]->(v2), e.weight)
                                     ^
MATCH (v1:v {id: 6}), (v2:v {id: 2}),
      p=dijkstra((v1:v)-[e:e]->(v2), e.weight)
RETURN nodes(p);
 nodes 
-------
(0 rows)

MATCH (v1:v), (v2:v),
      p=dijkstra((v1:v)-[e:e]->(v2), e.weight)
WHERE v1.id = 6 AND v2.id = 2
RETURN nodes(p);
 nodes 
-------
(0 rows)

MATCH (v1:v {id: 0}), (v2:v {id: 3})
RETURN dijkstra((v1)-[e:e]->(v2), e.weight);
                                                                                                           ?column?                                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"[v[5.1]{\"id\": 0},e[6.1][5.1,5.5]{\"weight\": 3},v[5.5]{\"id\": 4},e[6.6][5.5,5.2]{\"weight\": 2},v[5.2]{\"id\": 1},e[6.8][5.2,5.3]{\"weight\": 4},v[5.3]{\"id\": 2},e[6.12][5.3,5.4]{\"weight\": 2},v[5.4]{\"id\": 3}]"}
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 0})
RETURN dijkstra((v1)-[e:e]->(v2), e.weight);
        ?column?         
-------------------------
 {"[v[5.1]{\"id\": 0}]"}
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1)-[:e]->(v2), 1)
RETURN nodes(p);
                       nodes                       
---------------------------------------------------
 [v[5.1]{"id": 0},v[5.5]{"id": 4},v[5.4]{"id": 3}]
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
      p=dijkstra((v1)-[:e]->(v2), 1, LIMIT 10)
RETURN nodes(p);
                       nodes                       
---------------------------------------------------
 [v[5.1]{"id": 0},v[5.5]{"id": 4},v[5.4]{"id": 3}]
 [v[5.1]{"id": 0},v[5.6]{"id": 5},v[5.4]{"id": 3}]
 [v[5.1]{"id": 0},v[5.2]{"id": 1},v[5.4]{"id": 3}]
(3 rows)

MATCH (:v {id: 4})-[e:e]-(:v {id: 6})
SET e.weight = 4;
MATCH (v1:v {id: 0}), (v2:v {id: 3}),
	  (p, x)=dijkstra((v1)-[e:e]->(v2), e.weight, LIMIT 2)
RETURN nodes(p), x;
                                       nodes                                       | x  
-----------------------------------------------------------------------------------+----
 [v[5.1]{"id": 0},v[5.5]{"id": 4},v[5.7]{"id": 6},v[5.4]{"id": 3}]                 | 11
 [v[5.1]{"id": 0},v[5.5]{"id": 4},v[5.2]{"id": 1},v[5.3]{"id": 2},v[5.4]{"id": 3}] | 11
(2 rows)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
	  (p, x)=dijkstra((v2)<-[e:e]->(v1), e.weight, LIMIT 2)
RETURN nodes(p), x;
                                       nodes                                       | x  
-----------------------------------------------------------------------------------+----
 [v[5.4]{"id": 3},v[5.7]{"id": 6},v[5.5]{"id": 4},v[5.1]{"id": 0}]                 | 11
 [v[5.4]{"id": 3},v[5.3]{"id": 2},v[5.2]{"id": 1},v[5.5]{"id": 4},v[5.1]{"id": 0}] | 11
(2 rows)

MATCH (v1:v {id: 0}), (v2:v {id: 3})
RETURN dijkstra((v1)-[e:e]->(v2), e.weight, LIMIT 2);
                                                                                                                                                                                                ?column?                                                                                                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"[v[5.1]{\"id\": 0},e[6.1][5.1,5.5]{\"weight\": 3},v[5.5]{\"id\": 4},e[6.4][5.5,5.7]{\"weight\": 4},v[5.7]{\"id\": 6},e[6.11][5.7,5.4]{\"weight\": 4},v[5.4]{\"id\": 3}]","[v[5.1]{\"id\": 0},e[6.1][5.1,5.5]{\"weight\": 3},v[5.5]{\"id\": 4},e[6.6][5.5,5.2]{\"weight\": 2},v[5.2]{\"id\": 1},e[6.8][5.2,5.3]{\"weight\": 4},v[5.3]{\"id\": 2},e[6.12][5.3,5.4]{\"weight\": 2},v[5.4]{\"id\": 3}]"}
(1 row)

MATCH (v1:v {id: 0}), (v2:v {id: 3}),
	  (p, x)=dijkstra((v1)-[e:e]->(v2), e.weight, LIMIT 0)
RETURN nodes(p), x;
ERROR:  LIMIT must be larger than 0
MATCH (:v {id: 4})-[e:e]-(:v {id: 6})
SET e.weight = -1;
MATCH (v1:v {id: 0}), (v2:v {id: 3}),
	  (p, x)=dijkstra((v1)-[e:e]->(v2), e.weight, LIMIT 10)
return nodes(p), x;
ERROR:  WEIGHT must be larger than 0
-- AG-81
MATCH p= DIJKSTRA((a:v)-[:e]->(b:v), 1) WHERE a.id = 1
RETURN p;
                                p                                
-----------------------------------------------------------------
 [v[5.2]{"id": 1}]
 [v[5.2]{"id": 1},e[6.8][5.2,5.3]{"weight": 4},v[5.3]{"id": 2}]
 [v[5.2]{"id": 1},e[6.7][5.2,5.4]{"weight": 10},v[5.4]{"id": 3}]
 [v[5.2]{"id": 1},e[6.9][5.2,5.6]{"weight": 6},v[5.6]{"id": 5}]
(4 rows)

MATCH p= DIJKSTRA((a:v)-[:e]->(b:v), 1, LIMIT 1) WHERE a.id = 1
RETURN p;
                                p                                
-----------------------------------------------------------------
 [v[5.2]{"id": 1}]
 [v[5.2]{"id": 1},e[6.8][5.2,5.3]{"weight": 4},v[5.3]{"id": 2}]
 [v[5.2]{"id": 1},e[6.7][5.2,5.4]{"weight": 10},v[5.4]{"id": 3}]
 [v[5.2]{"id": 1},e[6.9][5.2,5.6]{"weight": 6},v[5.6]{"id": 5}]
(4 rows)

MATCH p= DIJKSTRA((a:v)-[r:e]->(b:v), 1, r.weight < 5, LIMIT 1) WHERE a.id = 1
RETURN p;
                                                      p                                                       
--------------------------------------------------------------------------------------------------------------
 [v[5.2]{"id": 1}]
 [v[5.2]{"id": 1},e[6.8][5.2,5.3]{"weight": 4},v[5.3]{"id": 2}]
 [v[5.2]{"id": 1},e[6.8][5.2,5.3]{"weight": 4},v[5.3]{"id": 2},e[6.12][5.3,5.4]{"weight": 2},v[5.4]{"id": 3}]
(3 rows)

-- cleanup
DROP GRAPH sp CASCADE;
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to sequence sp.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel person
drop cascades to elabel knows
drop cascades to vlabel v
drop cascades to elabel e
